// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum definitions for better data integrity
enum UserRole {
  RENTER
  STAFF
  ADMIN
}

enum StationStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

enum VehicleType {
  SEDAN
  SUV
  HATCHBACK
  COUPE
  CONVERTIBLE
  TRUCK
  VAN
}

enum VehicleStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
  RESERVED
  OUT_OF_SERVICE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

// Mới: trạng thái tài khoản chuẩn hóa
enum AccountStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

// Document types enum
enum DocumentType {
  DRIVERS_LICENSE
  ID_CARD
  PASSPORT
}

// Document verification status
enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum FuelType {
  ELECTRIC
  HYBRID
  GASOLINE
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  CASH
  PAYOS
}

enum PaymentType {
  DEPOSIT
  RENTAL_FEE
  LATE_FEE
  DAMAGE_FEE
  EXTENSION_FEE
  OTHER
}

enum VerifyStatus {
  UNVERIFIED
  PENDING
  VERIFIED
}

enum ConditionStatus {
  GOOD
  FAIR
  POOR
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  password      String
  role          UserRole        @default(RENTER)
  name          String?
  phone         String? // Added for contact information
  address       String? // Added for user address
  dateOfBirth   DateTime? // Added for age verification
  gender        String? // Added for reporting
  verifyToken  String?         @default("") // Token used for email verification
  verifyStatus VerifyStatus    @default(UNVERIFIED)
  forgetPasswordToken String?         @default("") // Token used for password reset
  accountStatus AccountStatus   @default(ACTIVE)
  softDeleted   Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  bookings      Booking[]
  managedBookings Booking[] @relation("BookingStaff") // Bookings managed by this staff member
  payments      Payment[]
  rentalHistory RentalHistory[]
  stationStaff  StationStaff[]
  documents     UserDocument[] // Add relation to documents
  Notification  Notification[]
  auditLogs     AuditLog[] // Add relation to audit logs
  contractTemplates ContractTemplate[] // Add relation to contract templates
  contractSignatures ContractSignature[] // Add relation to contract signatures
  inspections   VehicleInspection[]

  @@index([role])
  @@index([softDeleted])
}

model Station {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  location     Json // GeoJSON format for coordinates
  address      String? // Added for physical address
  contact      String? // Added for contact details
  capacity     Int
  status       StationStatus  @default(ACTIVE)
  softDeleted  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  vehicles     Vehicle[]
  bookings     Booking[]
  stationStaff StationStaff[]

  @@index([status])
  @@index([softDeleted])
}

model Vehicle {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  stationId    String        @db.ObjectId
  type         VehicleType // Changed to enum
  brand        String // Added brand
  model        String
  year         Int // Added year
  color        String // Added color
  seats        Int // Added seats
  licensePlate String? // Không đặt @unique vì là optional (xử lý unique ở DB index nếu cần)
  batteryLevel Float         @default(0.0) // 0..100 (enforce ở validator DB)
  fuelType     FuelType      @default(ELECTRIC) // Added fuel type
  status       VehicleStatus @default(AVAILABLE)
  pricingId    String?       @db.ObjectId // Foreign key to Pricing entity
  softDeleted  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  station      Station       @relation(fields: [stationId], references: [id])
  pricing      Pricing?      @relation(fields: [pricingId], references: [id])
  bookings     Booking[]
  images       VehicleImage[]
  inspections  VehicleInspection[]

  @@index([stationId, status])
  @@index([status])
  @@index([softDeleted])
  @@index([licensePlate])
  @@index([type])
  @@index([brand])
}

model Booking {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  userId               String             @db.ObjectId
  vehicleId            String             @db.ObjectId
  stationId            String             @db.ObjectId
  staffId              String?            @db.ObjectId // Staff member responsible for this booking
  startTime            DateTime
  endTime              DateTime?
  actualStartTime      DateTime? // Added actual start time
  actualEndTime        DateTime? // Added actual end time
  pickupLocation       String?
  dropoffLocation      String?
  actualPickupLocation String? // Added actual pickup location
  actualReturnLocation String? // Added actual return location
  pickupOdometer       Float? // Added pickup odometer
  returnOdometer       Float? // Added return odometer
  notes                String? // Added notes
  status               BookingStatus      @default(PENDING)
  basePrice            Float              @default(0.0) // Base rental price
  insuranceAmount      Float              @default(0.0) // Insurance charges
  taxAmount            Float              @default(0.0) // Tax charges
  discountAmount       Float              @default(0.0) // Total discount applied
  totalAmount          Float              @default(0.0) // Total amount to be paid
  depositAmount        Float              @default(0.0) // Security deposit amount
  depositStatus        PaymentStatus?     // Status of security deposit
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id])
  vehicle              Vehicle            @relation(fields: [vehicleId], references: [id])
  station              Station            @relation(fields: [stationId], references: [id])
  staff                User?              @relation("BookingStaff", fields: [staffId], references: [id])
  payments             Payment[]
  rentalHistories      RentalHistory[]
  promotionBookings    PromotionBooking[]
  rentalContracts      RentalContract[] // Add relation to rental contracts
  inspections          VehicleInspection[]

  @@index([userId, status, startTime])
  @@index([vehicleId, status, startTime])
  @@index([stationId, status, startTime])
  @@index([staffId, status, startTime]) // Index for staff-managed bookings
}

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  bookingId       String        @db.ObjectId
  amount          Float // tiền tệ
  currency        String        @default("VND") // Added currency
  paymentMethod   PaymentMethod // Changed to enum
  paymentProvider String? // Added payment provider
  transactionId   String?       @unique
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime?
  refundAmount    Float? // Added refund amount
  refundDate      DateTime? // Added refund date
  isDeposit       Boolean       @default(false) // Indicates if this is a security deposit
  depositStatus   PaymentStatus? // Status of deposit (PENDING, AUTHORIZED, CAPTURED, REFUNDED)
  depositRefundDate DateTime?   // When deposit was refunded
  paymentType     PaymentType   @default(DEPOSIT) // Type of payment
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  booking         Booking       @relation(fields: [bookingId], references: [id])

  @@index([bookingId, status])
  @@index([userId, status, paymentDate])
}

model RentalHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  bookingId String   @db.ObjectId
  distance  Float    @default(0.0)
  rating    Int?
  feedback  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  booking   Booking  @relation(fields: [bookingId], references: [id])

  @@index([userId, createdAt])
  @@index([bookingId])
}

model Promotion {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  code              String             @unique // Unique promotion code
  description       String?
  discount          Float // phần trăm hoặc số tiền (chọn 1 convention)
  discountType      String             @default("PERCENTAGE") // PERCENTAGE or FIXED_AMOUNT
  oneTimeUse        Boolean            @default(false) // Can only be used once per user
  usageLimit        Int? // Maximum number of times this promotion can be used (null = unlimited)
  minRentalAmount   Float? // Minimum rental amount to apply promotion
  maxDiscountAmount Float? // Maximum discount amount (for percentage discounts)
  validFrom         DateTime
  validUntil        DateTime
  isActive          Boolean            @default(true) // Whether promotion is active
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  promotionBookings PromotionBooking[]

  @@index([validFrom, validUntil])
  @@index([isActive])
}

// Model trung gian cho quan hệ promotion-booking (many-to-many)
model PromotionBooking {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  promotionId String    @db.ObjectId
  bookingId   String    @db.ObjectId
  discountAmount Float  @default(0.0) // Actual discount amount applied
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  booking     Booking   @relation(fields: [bookingId], references: [id])

  @@index([promotionId])
  @@index([bookingId])
}

model Pricing {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String     // Pricing plan name (e.g., "Standard", "Premium")
  baseRate     Float      // Base daily rate
  hourlyRate   Float      @default(0.0) // Hourly rate for short rentals
  weeklyRate   Float      @default(0.0) // Weekly rate for discounts
  monthlyRate  Float      @default(0.0) // Monthly rate for long-term rentals
  depositAmount Float     @default(0.0) // Security deposit amount
  insuranceRate Float     @default(0.0) // Daily insurance rate
  description  String?    // Description of the pricing plan
  isActive     Boolean    @default(true) // Whether this pricing plan is active
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  vehicles     Vehicle[]  // Vehicles using this pricing plan

  @@index([isActive])
}

// Model trung gian cho quan hệ staff-station (many-to-many)
model StationStaff {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  stationId String  @db.ObjectId
  userId    String  @db.ObjectId
  station   Station @relation(fields: [stationId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@index([stationId])
  @@index([userId])
}

// New model for user documents
model UserDocument {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  userId          String         @db.ObjectId
  documentType    DocumentType
  fileName        String // Original file name
  fileUrl         String // ImageKit URL
  fileId          String? // ImageKit file ID for deletion
  filePath        String // ImageKit file path
  thumbnailUrl    String? // ImageKit thumbnail URL
  fileSize        Int // File size in bytes
  mimeType        String // File MIME type
  status          DocumentStatus @default(PENDING)
  uploadedAt      DateTime       @default(now())
  verifiedAt      DateTime? // When document was verified
  verifiedBy      String? // Staff/Admin who verified
  rejectionReason String? // Reason for rejection if status is REJECTED
  expiryDate      DateTime? // For documents with expiry date
  documentNumber  String? // ID/License number
  user            User           @relation(fields: [userId], references: [id])

  @@index([userId, documentType])
  @@index([status])
  @@index([uploadedAt])
}

// New models for better data management

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  message   String
  type      String // INFO, WARNING, ERROR, SUCCESS
  priority  Int      @default(1) // 1: Low, 2: Medium, 3: High
  read      Boolean  @default(false)
  readAt    DateTime?
  expiresAt DateTime?
  actionUrl String?  // URL for actionable notifications
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, read])
  @@index([createdAt])
  @@index([priority])
  @@index([expiresAt])
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  action    String // CREATE, UPDATE, DELETE
  tableName String
  recordId  String
  oldData   Json?
  newData   Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([tableName, recordId])
}

// Enhanced Contract Management Models
model ContractTemplate {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  version        String
  content        String // Template content with placeholders
  templateType   String // RENTAL, MAINTENANCE, etc.
  isActive       Boolean         @default(true)
  createdBy      String          @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  creator        User            @relation(fields: [createdBy], references: [id])
  rentalContracts RentalContract[]

  @@index([createdBy], map: "idx_template_created_by")
  @@index([templateType, isActive])
}

model RentalContract {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  bookingId       String              @db.ObjectId
  templateId      String              @db.ObjectId
  contractNumber  String              @unique
  content         String // Final contract content
  status          String              @default("DRAFT") // DRAFT, PENDING_SIGNATURE, SIGNED, EXPIRED, CANCELLED
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  expiresAt       DateTime?
  finalizedAt     DateTime? // When contract was finalized
  booking         Booking             @relation(fields: [bookingId], references: [id])
  template        ContractTemplate    @relation(fields: [templateId], references: [id])
  signatures      ContractSignature[]

  @@index([bookingId])
  @@index([templateId], map: "idx_contract_template")
  @@index([status])
}

model ContractSignature {
  id                 String                  @id @default(auto()) @map("_id") @db.ObjectId
  contractId         String                  @db.ObjectId
  signerId           String                  @db.ObjectId
  signerRole         String // RENTER, STAFF, ADMIN
  signatureType      String // ELECTRONIC, DIGITAL_PAD, PAPER_SCAN, BIOMETRIC
  signatureData      String? // Base64 signature data or file path
  ipAddress          String?
  userAgent          String?
  gpsLocation        Json? // GPS coordinates if available
  signedAt           DateTime                @default(now())
  verificationStatus String                  @default("PENDING") // PENDING, VERIFIED, INVALID
  verificationData   Json? // Additional verification metadata
  contract           RentalContract          @relation(fields: [contractId], references: [id])
  signer             User                    @relation(fields: [signerId], references: [id])
  verifications      SignatureVerification[]

  @@index([contractId])
  @@index([signerId])
  @@index([contractId, signerRole])
  @@index([signedAt])
}

model SignatureVerification {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  signatureId        String            @db.ObjectId
  verificationType   String // TIMESTAMP, BIOMETRIC, IP_VALIDATION, etc.
  verificationResult String // PASSED, FAILED, PENDING
  verificationData   Json? // Detailed verification results
  verifiedAt         DateTime          @default(now())
  verifiedBy         String? // System or user who performed verification
  signature          ContractSignature @relation(fields: [signatureId], references: [id])

  @@index([signatureId])
  @@index([verificationResult])
  @@index([verifiedAt])
}

// Vehicle Image model for storing vehicle photos in ImageKit
model VehicleImage {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId       String   @db.ObjectId
  imageKitFileId  String   // ImageKit file ID for deletion
  url             String   // Full ImageKit URL
  thumbnailUrl    String?  // Thumbnail URL
  fileName        String   // Original file name
  size            Int      // File size in bytes
  fileType        String   // MIME type
  uploadedAt      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
  @@index([uploadedAt])
}

model VehicleInspection {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId         String          @db.ObjectId
  staffId           String          @db.ObjectId
  bookingId         String?         @db.ObjectId
  inspectionType    String          // "CHECK_IN" or "CHECK_OUT"
  batteryLevel      Float           // Battery percentage 0-100
  exteriorCondition ConditionStatus // "GOOD", "FAIR", "POOR"
  interiorCondition ConditionStatus // "GOOD", "FAIR", "POOR"
  mileage           Float?          // Vehicle odometer reading
  tireCondition     ConditionStatus? // "GOOD", "FAIR", "POOR"
  accessories       Json?           // JSON array of accessories present/missing
  damageNotes       String?         // Specific damage descriptions
  notes             String?
  images            Json?           // Array of image URLs from inspection
  isCompleted       Boolean         @default(false) // Whether inspection is finalized
  documentVerified  Boolean         @default(false) // Whether customer documents were verified
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  vehicle           Vehicle         @relation(fields: [vehicleId], references: [id])
  staff             User            @relation(fields: [staffId], references: [id])
  booking           Booking?        @relation(fields: [bookingId], references: [id])

  @@index([vehicleId, createdAt])
  @@index([staffId])
  @@index([inspectionType])
  @@index([isCompleted])
}
